"use strict";var _interopRequireDefault=require("@babel/runtime-corejs3/helpers/interopRequireDefault");var _setInterval2=_interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/set-interval"));var _keys=_interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/keys"));var _forEach=_interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));let storage=require("./storage"),path=require('path'),model=require("./model"),asyncWaterfall=require('neo-async/waterfall'),customUtils=require("./customUtils"),Index=require("./indexes");function Persistence(options){let i,j,randomString;this.db=options.db;this.inMemoryOnly=this.db.inMemoryOnly;this.filename=this.db.filename;this.corruptAlertThreshold=options.corruptAlertThreshold!==undefined?options.corruptAlertThreshold:0.1;if(!this.inMemoryOnly&&this.filename&&this.filename.charAt(this.filename.length-1)==='~'){throw new Error("The datafile name can't end with a ~, which is reserved for crash safe backup files");}if(options.afterSerialization&&!options.beforeDeserialization){throw new Error("Serialization hook defined but deserialization hook undefined, cautiously refusing to start NeDB to prevent dataloss");}if(!options.afterSerialization&&options.beforeDeserialization){throw new Error("Serialization hook undefined but deserialization hook defined, cautiously refusing to start NeDB to prevent dataloss");}this.afterSerialization=options.afterSerialization||function(s){return s;};this.beforeDeserialization=options.beforeDeserialization||function(s){return s;};for(i=1;i<30;i+=1){for(j=0;j<10;j+=1){randomString=customUtils.uid(i);if(this.beforeDeserialization(this.afterSerialization(randomString))!==randomString){throw new Error("beforeDeserialization is not the reverse of afterSerialization, cautiously refusing to start NeDB to prevent dataloss");}}}if(this.filename&&options.nodeWebkitAppName){console.log("==================================================================");console.log("WARNING: The nodeWebkitAppName option is deprecated");console.log("To get the path to the directory where Node Webkit stores the data");console.log("for your app, use the internal nw.gui module like this");console.log("require('nw.gui').App.dataPath");console.log("See https://github.com/rogerwang/node-webkit/issues/500");console.log("==================================================================");this.filename=Persistence.getNWAppFilename(options.nodeWebkitAppName,this.filename);}}Persistence.ensureDirectoryExists=function(dir,cb){let callback=cb||function(){};storage.mkdirp(dir,function(err){return callback(err);});};Persistence.getNWAppFilename=function(appName,relativeFilename){let home;switch(process.platform){case'win32':case'win64':home=process.env.LOCALAPPDATA||process.env.APPDATA;if(!home){throw new Error("Couldn't find the base application data folder");}home=path.join(home,appName);break;case'darwin':home=process.env.HOME;if(!home){throw new Error("Couldn't find the base application data directory");}home=path.join(home,'Library','Application Support',appName);break;case'linux':home=process.env.HOME;if(!home){throw new Error("Couldn't find the base application data directory");}home=path.join(home,'.config',appName);break;default:throw new Error("Can't use the Node Webkit relative path for platform "+process.platform);}return path.join(home,'nedb-data',relativeFilename);};Persistence.prototype.persistCachedDatabase=function(cb){var _context,_context2;let callback=cb||function(){},toPersist='',self=this;if(this.inMemoryOnly){return callback(null);}(0,_forEach.default)(_context=this.db.getAllData()).call(_context,function(doc){toPersist+=self.afterSerialization(model.serialize(doc))+'\n';});(0,_forEach.default)(_context2=(0,_keys.default)(this.db.indexes)).call(_context2,function(fieldName){if(fieldName!="id"){toPersist+=self.afterSerialization(model.serialize({$$indexCreated:{fieldName:fieldName,unique:self.db.indexes[fieldName].unique,sparse:self.db.indexes[fieldName].sparse}}))+'\n';}});storage.crashSafeWriteFile(this.filename,toPersist,function(err){if(err){return callback(err);}self.db.emit('compaction.done');return callback(null);});};Persistence.prototype.compactDatafile=function(cb){this.db.executor.push({this:this,fn:this.persistCachedDatabase,arguments:[cb]});};Persistence.prototype.setAutocompactionInterval=function(interval){let self=this,minInterval=5000,realInterval=Math.max(interval||0,minInterval);this.stopAutocompaction();this.autocompactionIntervalId=(0,_setInterval2.default)(function(){self.compactDatafile();},realInterval);};Persistence.prototype.stopAutocompaction=function(){if(this.autocompactionIntervalId){clearInterval(this.autocompactionIntervalId);}};Persistence.prototype.persistNewState=function(newDocs,cb){let self=this,toPersist='',callback=cb||function(){};if(self.inMemoryOnly){return callback(null);}(0,_forEach.default)(newDocs).call(newDocs,function(doc){toPersist+=self.afterSerialization(model.serialize(doc))+'\n';});if(toPersist.length===0){return callback(null);}storage.appendFile(self.filename,toPersist,'utf8',function(err){return callback(err);});};Persistence.prototype.treatRawData=function(rawData){var _context3;let data=rawData.split('\n'),dataById={},tdata=[],i,indexes={},corruptItems=-1;for(i=0;i<data.length;i+=1){let doc;try{doc=model.deserialize(this.beforeDeserialization(data[i]));if(doc.id){if(doc.$$deleted===true){delete dataById[doc.id];}else{dataById[doc.id]=doc;}}else if(doc.$$indexCreated&&doc.$$indexCreated.fieldName!=undefined){indexes[doc.$$indexCreated.fieldName]=doc.$$indexCreated;}else if(typeof doc.$$indexRemoved==="string"){delete indexes[doc.$$indexRemoved];}}catch(e){corruptItems+=1;}}if(data.length>0&&corruptItems/data.length>this.corruptAlertThreshold){throw new Error("More than "+Math.floor(100*this.corruptAlertThreshold)+"% of the data file is corrupt, the wrong beforeDeserialization hook may be used. Cautiously refusing to start NeDB to prevent dataloss");}(0,_forEach.default)(_context3=(0,_keys.default)(dataById)).call(_context3,function(k){tdata.push(dataById[k]);});return{data:tdata,indexes:indexes};};Persistence.prototype.loadDatabase=function(cb){let callback=cb||function(){},self=this;self.db.resetIndexes();if(self.inMemoryOnly){return callback(null);}asyncWaterfall([function(cb){Persistence.ensureDirectoryExists(path.dirname(self.filename),function(err){storage.ensureDatafileIntegrity(self.filename,function(err){storage.readFile(self.filename,'utf8',function(err,rawData){var _context4;if(err){return cb(err);}let treatedData;try{treatedData=self.treatRawData(rawData);}catch(e){return cb(e);}(0,_forEach.default)(_context4=(0,_keys.default)(treatedData.indexes)).call(_context4,function(key){self.db.indexes[key]=new Index(treatedData.indexes[key]);});try{self.db.resetIndexes(treatedData.data);}catch(e){self.db.resetIndexes();return cb(e);}self.db.persistence.persistCachedDatabase(cb);});});});}],function(err){if(err){return callback(err);}self.db.executor.processBuffer();return callback(null);});};module.exports=Persistence;