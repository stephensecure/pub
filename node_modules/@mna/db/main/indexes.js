"use strict";var _interopRequireDefault=require("@babel/runtime-corejs3/helpers/interopRequireDefault");var _keys=_interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/keys"));var _forEach=_interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));let BinarySearchTree=require("../binary-search-tree").AVLTree,model=require("./model"),_=require('underscore'),util=require('util');function checkValueEquality(a,b){return a===b;}function projectForUnique(elt){if(elt===null){return'$null';}if(typeof elt==='string'){return'$string'+elt;}if(typeof elt==='boolean'){return'$boolean'+elt;}if(typeof elt==='number'){return'$number'+elt;}if(util.isArray(elt)){return'$date'+elt.getTime();}return elt;}function Index(options){this.fieldName=options.fieldName;this.unique=options.unique||false;this.sparse=options.sparse||false;this.treeOptions={unique:this.unique,compareKeys:model.compareThings,checkValueEquality:checkValueEquality};this.reset();}Index.prototype.reset=function(newData){this.tree=new BinarySearchTree(this.treeOptions);if(newData){this.insert(newData);}};Index.prototype.insert=function(doc){let key,self=this,keys,i,failingI,error;if(util.isArray(doc)){this.insertMultipleDocs(doc);return;}key=model.getDotValue(doc,this.fieldName);if(key===undefined&&this.sparse){return;}if(!util.isArray(key)){this.tree.insert(key,doc);}else{keys=_.uniq(key,projectForUnique);for(i=0;i<keys.length;i+=1){try{this.tree.insert(keys[i],doc);}catch(e){error=e;failingI=i;break;}}if(error){for(i=0;i<failingI;i+=1){this.tree.delete(keys[i],doc);}throw error;}}};Index.prototype.insertMultipleDocs=function(docs){let i,error,failingI;for(i=0;i<docs.length;i+=1){try{this.insert(docs[i]);}catch(e){error=e;failingI=i;break;}}if(error){for(i=0;i<failingI;i+=1){this.remove(docs[i]);}throw error;}};Index.prototype.remove=function(doc){let key,self=this;if(util.isArray(doc)){(0,_forEach.default)(doc).call(doc,function(d){self.remove(d);});return;}key=model.getDotValue(doc,this.fieldName);if(key===undefined&&this.sparse){return;}if(!util.isArray(key)){this.tree.delete(key,doc);}else{var _context;(0,_forEach.default)(_context=_.uniq(key,projectForUnique)).call(_context,function(_key){self.tree.delete(_key,doc);});}};Index.prototype.update=function(oldDoc,newDoc){if(util.isArray(oldDoc)){this.updateMultipleDocs(oldDoc);return;}this.remove(oldDoc);try{this.insert(newDoc);}catch(e){this.insert(oldDoc);throw e;}};Index.prototype.updateMultipleDocs=function(pairs){let i,failingI,error;for(i=0;i<pairs.length;i+=1){this.remove(pairs[i].oldDoc);}for(i=0;i<pairs.length;i+=1){try{this.insert(pairs[i].newDoc);}catch(e){error=e;failingI=i;break;}}if(error){for(i=0;i<failingI;i+=1){this.remove(pairs[i].newDoc);}for(i=0;i<pairs.length;i+=1){this.insert(pairs[i].oldDoc);}throw error;}};Index.prototype.revertUpdate=function(oldDoc,newDoc){let revert=[];if(!util.isArray(oldDoc)){this.update(newDoc,oldDoc);}else{(0,_forEach.default)(oldDoc).call(oldDoc,function(pair){revert.push({oldDoc:pair.newDoc,newDoc:pair.oldDoc});});this.update(revert);}};Index.prototype.getMatching=function(value){let self=this;if(!util.isArray(value)){return self.tree.search(value);}else{var _context3;let _res={},res=[];(0,_forEach.default)(value).call(value,function(v){var _context2;(0,_forEach.default)(_context2=self.getMatching(v)).call(_context2,function(doc){_res[doc.id]=doc;});});(0,_forEach.default)(_context3=(0,_keys.default)(_res)).call(_context3,function(id){res.push(_res[id]);});return res;}};Index.prototype.getBetweenBounds=function(query){return this.tree.betweenBounds(query);};Index.prototype.getAll=function(){let res=[];this.tree.executeOnEveryNode(function(node){let i;for(i=0;i<node.data.length;i+=1){res.push(node.data[i]);}});return res;};module.exports=Index;