"use strict";var _interopRequireDefault=require("@babel/runtime-corejs3/helpers/interopRequireDefault");var _defineProperty2=_interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/define-property"));var _defineProperties=_interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/define-properties"));var _getOwnPropertyDescriptors=_interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors"));var _getOwnPropertyDescriptor=_interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor"));var _getOwnPropertySymbols=_interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols"));var _map=_interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));var _forEach=_interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));var _keys=_interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/keys"));var _filter=_interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/filter"));var _defineProperty3=_interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));var _objectWithoutProperties2=_interopRequireDefault(require("@babel/runtime-corejs3/helpers/objectWithoutProperties"));var _promise=_interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/promise"));function ownKeys(object,enumerableOnly){var keys=(0,_keys.default)(object);if(_getOwnPropertySymbols.default){var symbols=(0,_getOwnPropertySymbols.default)(object);if(enumerableOnly)symbols=(0,_filter.default)(symbols).call(symbols,function(sym){return(0,_getOwnPropertyDescriptor.default)(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){var _context4;(0,_forEach.default)(_context4=ownKeys(Object(source),true)).call(_context4,function(key){(0,_defineProperty3.default)(target,key,source[key]);});}else if(_getOwnPropertyDescriptors.default){(0,_defineProperties.default)(target,(0,_getOwnPropertyDescriptors.default)(source));}else{var _context5;(0,_forEach.default)(_context5=ownKeys(Object(source))).call(_context5,function(key){(0,_defineProperty2.default)(target,key,(0,_getOwnPropertyDescriptor.default)(source,key));});}}return target;}module.exports=function extendUpdate({db,instance}){db.update=(query={},props,options={})=>new _promise.default((resolve,reject)=>{var _context,_context2;if(!props){const{id,name}=query,restOfQuery=(0,_objectWithoutProperties2.default)(query,["id","name"]);if(id||name){query=id?{id}:{name};props=name?_objectSpread({name},restOfQuery):restOfQuery;}else{const{query:updateQuery,$upsert}=query,restOfProps=(0,_objectWithoutProperties2.default)(query,["query","$upsert"]);query=updateQuery;props=restOfProps;if(!query){if($upsert){return db.create(restOfProps);}reject(new Error('Database update needs "id" or "query"'));return;}}}const{$multi=options.multi,$replace=options.replace,$upsert=options.upsert,id}=props,data=(0,_objectWithoutProperties2.default)(props,["$multi","$replace","$upsert","id"]);const method=$multi?'find':'findOne';const withModifier=(0,_filter.default)(_context=(0,_keys.default)(data)).call(_context,key=>key[0]==='$').length;(0,_forEach.default)(_context2=(0,_keys.default)(query)).call(_context2,key=>{if(typeof query[key]==='undefined')delete query[key];});return db[method](query).then(docs=>{if(!docs){if(!$upsert)return resolve(0);return db.insert(data).then(resolve).catch(reject);}if(!$multi)docs=[docs];_promise.default.all((0,_map.default)(docs).call(docs,doc=>new _promise.default((docResolve,docReject)=>{const{id}=doc,origData=(0,_objectWithoutProperties2.default)(doc,["id"]);const newData=$replace||withModifier?data:_objectSpread({},origData,{},data);if(withModifier){var _context3;(0,_forEach.default)(_context3=(0,_keys.default)(newData)).call(_context3,key=>{if(key[0]==='$')return;if(!newData.$set)newData.$set={};newData.$set[key]=newData[key];delete newData[key];});}instance.update({id},newData,options,(err,num)=>err?docReject(err):docResolve(num));}))).then(()=>resolve(docs.length)).catch(reject);}).catch(reject);});return db;};