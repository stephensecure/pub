"use strict";var _interopRequireDefault=require("@babel/runtime-corejs3/helpers/interopRequireDefault");var _parseInt2=_interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/parse-int"));var _slice=_interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/slice"));var _sort=_interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/sort"));var _find=_interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/find"));var _forEach=_interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));var _objectWithoutProperties2=_interopRequireDefault(require("@babel/runtime-corejs3/helpers/objectWithoutProperties"));var _promise=_interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/promise"));var _bind=_interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/bind"));const{promisify}=require('util');module.exports=function extendFind({db,instance}){var _context;const findOne=promisify((0,_bind.default)(_context=instance.findOne).call(_context,instance));db.findOne=(query={},...args)=>findOne(query,...args);db.find=(extendedQuery={},options={})=>new _promise.default((resolve,reject)=>{const{$page,$pageMax=10,$sort,$skip,$include,$exclude,$projection=options.projection,$count}=extendedQuery,query=(0,_objectWithoutProperties2.default)(extendedQuery,["$page","$pageMax","$sort","$skip","$include","$exclude","$projection","$count"]);if($include){(0,_forEach.default)($include).call($include,key=>$projection[key]=1);}else if($exclude){(0,_forEach.default)($exclude).call($exclude,key=>$projection[key]=0);}if(!$page){let cursor=(0,_find.default)(instance).call(instance,query,$projection);if($sort)cursor=(0,_sort.default)(cursor).call(cursor,$sort);if($skip)cursor=cursor.skip($skip);return cursor.exec((err,docs)=>err?reject(err):resolve(!docs?[]:!$count?docs:(0,_slice.default)(docs).call(docs,0,(0,_parseInt2.default)($count,10))));}db.count(query).then(maxItems=>{let cursor=(0,_find.default)(instance).call(instance,query,$projection);if($sort)cursor=(0,_sort.default)(cursor).call(cursor,$sort);if($skip)cursor=cursor.skip($skip);const maxPages=Math.ceil(maxItems/$pageMax);const startIndex=($page-1)*$pageMax;const endIndex=$pageMax;return cursor.skip(startIndex).limit(endIndex).exec((err,docs)=>err?reject(err):resolve({result:docs,currentPage:$page,pageMax:$pageMax,maxItems,maxPages}));});});return db;};